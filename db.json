{
  "posts": [
    {
      "id": 1,
      "title": "Введение в JavaScript: основы для начинающих",
      "content": "# JavaScript для начинающих\n\nJavaScript — это мультипарадигменный язык программирования, который позволяет создавать интерактивные элементы на веб-страницах. Он используется как на стороне клиента, так и на стороне сервера.\n\n## Основные концепции\n\n### Переменные\nВ JavaScript есть три способа объявления переменных: `var`, `let` и `const`.\n```javascript\nlet name = 'Иван';\nconst age = 25;\n```\n\n### Функции\nФункции в JavaScript позволяют организовать код в многократно используемые блоки:\n```javascript\nfunction greet(name) {\n  return `Привет, ${name}!`;\n}\n```\n\n## Заключение\nЯзык JavaScript постоянно развивается и является одним из самых популярных языков программирования в мире веб-разработки.",
      "author": "Александр Иванов",
      "createdAt": "2024-05-01T10:00:00.000Z",
      "updatedAt": "2024-05-01T10:00:00.000Z"
    },
    {
      "id": 2,
      "title": "Что такое React и почему он так популярен",
      "content": "# React: библиотека для создания пользовательских интерфейсов\n\nReact — это JavaScript-библиотека с открытым исходным кодом для разработки пользовательских интерфейсов. Она была создана Facebook в 2013 году и с тех пор завоевала огромную популярность.\n\n## Основные преимущества React\n\n### Виртуальный DOM\nВместо прямого обновления DOM, React создает легковесную копию DOM в памяти (виртуальный DOM) и эффективно обновляет только изменившиеся элементы.\n\n### Компонентный подход\nReact строится вокруг компонентов — изолированных частей кода, которые отвечают за рендеринг определенной части пользовательского интерфейса.\n```jsx\nfunction Welcome(props) {\n  return <h1>Привет, {props.name}!</h1>;\n}\n```\n\n## Экосистема React\nСегодня экосистема React включает множество инструментов, таких как React Router, Redux, Next.js и многие другие, которые делают разработку приложений еще более удобной.",
      "author": "Мария Петрова",
      "createdAt": "2024-05-10T15:30:00.000Z",
      "updatedAt": "2024-05-10T15:30:00.000Z"
    },
    {
      "id": 3,
      "title": "Введение в TypeScript: типизация в JavaScript",
      "content": "# TypeScript: JavaScript с типами\n\nTypeScript — это язык программирования с открытым исходным кодом, разработанный и поддерживаемый Microsoft. По сути, это надмножество JavaScript, добавляющее статическую типизацию и другие возможности объектно-ориентированного программирования.\n\n## Почему стоит использовать TypeScript\n\n### Типы данных\nTypescript позволяет определять типы для переменных, параметров функций и возвращаемых значений:\n```typescript\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n```\n\n### Интерфейсы и типы\nВы можете описывать структуру объектов с помощью интерфейсов и типов:\n```typescript\ninterface User {\n  id: number;\n  name: string;\n  email?: string; // Опциональное поле\n}\n```\n\n## Интеграция с инструментами\nTypeScript отлично интегрируется с популярными фреймворками и библиотеками, такими как React, Vue и Node.js. Это делает его незаменимым инструментом для больших и средних проектов.",
      "author": "Дмитрий Соколов",
      "createdAt": "2024-05-15T09:15:00.000Z",
      "updatedAt": "2024-05-15T09:15:00.000Z"
    },
    {
      "id": 4,
      "title": "CSS Grid и Flexbox: современные инструменты для верстки",
      "content": "# Grid и Flexbox: современная верстка\n\nCSS Grid и Flexbox — это мощные инструменты для создания современных, адаптивных макетов веб-страниц.\n\n## CSS Flexbox\n\nFlexbox предназначен для одномерных макетов. Это означает, что он работает либо в строках, либо в столбцах.\n\n```css\n.container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n```\n\n## CSS Grid\n\nCSS Grid предназначен для двумерных макетов, что делает его идеальным для создания сложных страниц.\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n}\n```\n\n## Когда использовать\n\n- **Flexbox** лучше подходит для компонентов пользовательского интерфейса и небольших макетов\n- **Grid** лучше подходит для больших масштабных макетов и сложных структур страниц\n\nВместе эти технологии предоставляют разработчикам мощный набор инструментов для создания практически любого макета веб-страницы.",
      "author": "Елена Смирнова",
      "createdAt": "2024-05-20T14:00:00.000Z",
      "updatedAt": "2024-05-20T14:00:00.000Z"
    },
    {
      "id": 5,
      "title": "Node.js и Express: создание REST API",
      "content": "# Создание REST API с Node.js и Express\n\nNode.js в сочетании с Express представляет собой мощный инструментарий для создания быстрых и масштабируемых API.\n\n## Настройка базового сервера\n\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.get('/', (req, res) => {\n  res.send('Привет, мир!');\n});\n\napp.listen(3000, () => {\n  console.log('Сервер запущен на порту 3000');\n});\n```\n\n## Создание маршрутов для API\n\nExpress позволяет легко создавать маршруты для различных HTTP-методов:\n\n```javascript\n// GET-запрос для получения всех пользователей\napp.get('/api/users', (req, res) => {\n  // Логика получения пользователей из базы данных\n  res.json(users);\n});\n\n// POST-запрос для создания нового пользователя\napp.post('/api/users', (req, res) => {\n  const { name, email } = req.body;\n  // Логика создания пользователя\n  res.status(201).json(newUser);\n});\n```\n\n## Middleware\n\nОдним из ключевых преимуществ Express является возможность использования промежуточного ПО (middleware):\n\n```javascript\n// Middleware для логирования запросов\napp.use((req, res, next) => {\n  console.log(`${req.method} ${req.path}`);\n  next();\n});\n```\n\nNode.js и Express — отличный выбор для создания современных API, обеспечивающий гибкость, производительность и масштабируемость.",
      "author": "Сергей Новиков",
      "createdAt": "2024-05-25T11:30:00.000Z",
      "updatedAt": "2024-05-25T11:30:00.000Z"
    },
    {
      "id": 6,
      "title": "Принципы SOLID в современной разработке",
      "content": "# Принципы SOLID в программировании\n\nSOLID — это аббревиатура пяти основных принципов объектно-ориентированного программирования, которые помогают создавать более понятные, гибкие и сопровождаемые системы.\n\n## S — Single Responsibility Principle (Принцип единственной ответственности)\n\nКаждый класс должен иметь только одну причину для изменения.\n\n```javascript\n// Плохо\nclass User {\n  constructor(name) {\n    this.name = name;\n  }\n  \n  saveToDatabase() {\n    // Логика сохранения в базу данных\n  }\n}\n\n// Хорошо\nclass User {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nclass UserRepository {\n  saveUser(user) {\n    // Логика сохранения в базу данных\n  }\n}\n```\n\n## O — Open/Closed Principle (Принцип открытости/закрытости)\n\nПрограммные сущности должны быть открыты для расширения, но закрыты для модификации.\n\n## L — Liskov Substitution Principle (Принцип подстановки Лисков)\n\nОбъекты в программе должны быть заменяемы экземплярами их подтипов без изменения корректности программы.\n\n## I — Interface Segregation Principle (Принцип разделения интерфейса)\n\nМного специализированных интерфейсов лучше, чем один общий.\n\n## D — Dependency Inversion Principle (Принцип инверсии зависимостей)\n\nМодули высокого уровня не должны зависеть от модулей низкого уровня. Оба должны зависеть от абстракций.\n\nСледование принципам SOLID помогает создавать код, который легче поддерживать, тестировать и расширять в долгосрочной перспективе.",
      "author": "Алексей Морозов",
      "createdAt": "2024-05-28T10:00:00.000Z",
      "updatedAt": "2024-05-28T10:00:00.000Z"
    },
    {
      "title": "Nuxt 3: новые возможности и преимущества",
      "content": "# Nuxt 3: Фреймворк для Vue.js\n\nNuxt 3 — это последняя версия популярного фреймворка для создания веб-приложений на Vue.js. Он предлагает множество новых функций и улучшений по сравнению с предыдущими версиями.\n\n## Ключевые особенности Nuxt 3\n\n### Нативная поддержка TypeScript\nNuxt 3 полностью переписан на TypeScript, что обеспечивает лучшую типизацию и автодополнение кода.\n\n### Улучшенная производительность\nНовый движок Nitro обеспечивает более быстрый запуск и меньшее потребление памяти.\n\n```javascript\n// Пример API-маршрута в Nuxt 3\nexport default defineEventHandler(async (event) => {\n  const { id } = event.context.params;\n  const { data } = await $fetch(`/api/products/${id}`);\n  return { product: data };\n});\n```\n\n### Композиционный API\nNuxt 3 полностью поддерживает Composition API, которое стало стандартом в Vue 3.\n\n```vue\n<script setup>\nconst { data: products } = await useFetch('/api/products');\nconst filteredProducts = computed(() => {\n  // Логика фильтрации\n});\n</script>\n```\n\n## Режимы рендеринга\n\nNuxt 3 поддерживает множество режимов рендеринга:\n\n- **SSR (Server-Side Rendering)** — рендеринг на сервере\n- **SSG (Static Site Generation)** — генерация статических сайтов\n- **CSR (Client-Side Rendering)** — рендеринг на клиенте\n- **ISR (Incremental Static Regeneration)** — инкрементальная статическая регенерация\n\nЭта гибкость делает Nuxt 3 отличным выбором для широкого спектра проектов: от больших корпоративных приложений до простых лендингов.",
      "updatedAt": "2025-05-29T06:12:50.526Z",
      "id": 7
    },
    {
      "id": 8,
      "title": "Docker для разработчиков: основы контейнеризации",
      "content": "# Введение в Docker для веб-разработчиков\n\nDocker — это платформа для разработки, доставки и запуска приложений в контейнерах. Контейнеризация помогает разработчикам создавать и развертывать приложения в стандартизированной среде.\n\n## Основные понятия\n\n### Образы (Images)\nОбразы Docker — это шаблоны только для чтения, содержащие набор инструкций для создания контейнера.\n\n### Контейнеры (Containers)\nКонтейнеры — это запущенные экземпляры образов, которые можно запускать, останавливать, перемещать и удалять.\n\n## Основные команды Docker\n\n```bash\n# Запуск контейнера\ndocker run -p 8080:80 nginx\n\n# Просмотр запущенных контейнеров\ndocker ps\n\n# Остановка контейнера\ndocker stop <container_id>\n```\n\n## Dockerfile\n\nDockerfile позволяет создавать собственные образы:\n\n```dockerfile\nFROM node:14\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n```\n\n## Docker Compose\n\nDocker Compose упрощает управление многоконтейнерными приложениями:\n\n```yaml\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n  db:\n    image: postgres\n    environment:\n      POSTGRES_PASSWORD: example\n```\n\nИспользование Docker в процессе разработки обеспечивает единообразие сред, изоляцию зависимостей и упрощает процесс развертывания.",
      "author": "Игорь Васильев",
      "createdAt": "2024-06-01T13:20:00.000Z",
      "updatedAt": "2024-06-01T13:20:00.000Z"
    }
  ],
  "comments": [
    {
      "id": 1,
      "postId": 1,
      "text": "Отличный пост! Очень информативно для новичков в JavaScript.",
      "author": "Елена",
      "createdAt": "2024-05-01T11:30:00.000Z"
    },
    {
      "id": 2,
      "postId": 1,
      "text": "Спасибо за подробное объяснение переменных и функций!",
      "author": "Максим",
      "createdAt": "2024-05-01T12:45:00.000Z"
    },
    {
      "id": 3,
      "postId": 2,
      "text": "Полностью согласен с автором. React действительно изменил подход к фронтенд-разработке.",
      "author": "Анна",
      "createdAt": "2024-05-10T16:20:00.000Z"
    },
    {
      "id": 4,
      "postId": 2,
      "text": "Используем React в нашей компании уже 3 года, не представляю работу без него!",
      "author": "Павел",
      "createdAt": "2024-05-11T09:10:00.000Z"
    },
    {
      "id": 5,
      "postId": 3,
      "text": "TypeScript действительно спасает от множества потенциальных ошибок!",
      "author": "Ольга",
      "createdAt": "2024-05-15T10:30:00.000Z"
    },
    {
      "id": 6,
      "postId": 4,
      "text": "Большое спасибо за сравнение Grid и Flexbox. Теперь понятно, когда что использовать.",
      "author": "Антон",
      "createdAt": "2024-05-20T15:20:00.000Z"
    },
    {
      "id": 7,
      "postId": 5,
      "text": "Express — лучший фреймворк для Node.js. Использую его во всех проектах.",
      "author": "Марина",
      "createdAt": "2024-05-25T12:15:00.000Z"
    },
    {
      "id": 8,
      "postId": 6,
      "text": "SOLID принципы должен знать каждый разработчик! Отличная статья.",
      "author": "Виктор",
      "createdAt": "2024-05-28T11:05:00.000Z"
    },
    {
      "id": 9,
      "postId": 7,
      "text": "Недавно перешли на Nuxt 3 с Nuxt 2. Разница колоссальная!",
      "author": "Дарья",
      "createdAt": "2024-05-30T10:50:00.000Z"
    },
    {
      "id": 10,
      "postId": 8,
      "text": "Docker изменил всю мою работу как разработчика. Больше никаких проблем с окружением!",
      "author": "Артем",
      "createdAt": "2024-06-01T14:00:00.000Z"
    }
  ],
  "users": [
    {
      "id": 1,
      "email": "user@example.com",
      "password": "password123",
      "name": "Иван Иванов",
      "createdAt": "2024-03-10T00:00:00.000Z"
    },
    {
      "id": 2,
      "email": "admin@example.com",
      "password": "admin123",
      "name": "Администратор",
      "createdAt": "2024-03-15T00:00:00.000Z"
    }
  ]
}